{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-18T05:31:21.953Z",
    "end": "2024-09-18T05:31:31.415Z",
    "duration": 9462,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "30234bee-8a84-4a32-9b29-a4c06e398b65",
      "title": "",
      "fullFile": "cypress\\e2e\\ParameterizedLogin.cy.js",
      "file": "cypress\\e2e\\ParameterizedLogin.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f059e651-94d5-48be-b0a2-7d55a43a1a09",
          "title": "Parameterized login test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should succeed with user1",
              "fullTitle": "Parameterized login test should succeed with user1",
              "timedOut": null,
              "duration": 1747,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Use the userData variable directly since it's defined in the outer scope\nconst {\n  username,\n  password\n} = userData[user]; // Access user data correctly\ncy.get('[data-test=\"username\"]').type(username);\ncy.get('[data-test=\"password\"]').type(password);\ncy.get('input#login-button').click();\n// Add assertions based on shouldSucceed\nif (shouldSucceed) {\n  cy.url().should('include', expectedUrl);\n} else {\n  cy.url().should('include', '/'); // Adjust based on your application\n  cy.get('[data-test=\"error\"]').should('be.visible').and('have.text', 'Epic sadface: Sorry, this user has been locked out.'); // Adjust selector based on your app\n}",
              "err": {},
              "uuid": "ecd85cfe-8420-4bf0-a099-6ceb0080b753",
              "parentUUID": "f059e651-94d5-48be-b0a2-7d55a43a1a09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with user2",
              "fullTitle": "Parameterized login test should fail with user2",
              "timedOut": null,
              "duration": 790,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Use the userData variable directly since it's defined in the outer scope\nconst {\n  username,\n  password\n} = userData[user]; // Access user data correctly\ncy.get('[data-test=\"username\"]').type(username);\ncy.get('[data-test=\"password\"]').type(password);\ncy.get('input#login-button').click();\n// Add assertions based on shouldSucceed\nif (shouldSucceed) {\n  cy.url().should('include', expectedUrl);\n} else {\n  cy.url().should('include', '/'); // Adjust based on your application\n  cy.get('[data-test=\"error\"]').should('be.visible').and('have.text', 'Epic sadface: Sorry, this user has been locked out.'); // Adjust selector based on your app\n}",
              "err": {},
              "uuid": "618df6a1-6ac7-4e0d-94af-c2d61834fbfa",
              "parentUUID": "f059e651-94d5-48be-b0a2-7d55a43a1a09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should succeed with user3",
              "fullTitle": "Parameterized login test should succeed with user3",
              "timedOut": null,
              "duration": 870,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Use the userData variable directly since it's defined in the outer scope\nconst {\n  username,\n  password\n} = userData[user]; // Access user data correctly\ncy.get('[data-test=\"username\"]').type(username);\ncy.get('[data-test=\"password\"]').type(password);\ncy.get('input#login-button').click();\n// Add assertions based on shouldSucceed\nif (shouldSucceed) {\n  cy.url().should('include', expectedUrl);\n} else {\n  cy.url().should('include', '/'); // Adjust based on your application\n  cy.get('[data-test=\"error\"]').should('be.visible').and('have.text', 'Epic sadface: Sorry, this user has been locked out.'); // Adjust selector based on your app\n}",
              "err": {},
              "uuid": "c233e885-0c0c-42b0-95a1-6310b8905198",
              "parentUUID": "f059e651-94d5-48be-b0a2-7d55a43a1a09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should succeed with user4",
              "fullTitle": "Parameterized login test should succeed with user4",
              "timedOut": null,
              "duration": 5930,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Use the userData variable directly since it's defined in the outer scope\nconst {\n  username,\n  password\n} = userData[user]; // Access user data correctly\ncy.get('[data-test=\"username\"]').type(username);\ncy.get('[data-test=\"password\"]').type(password);\ncy.get('input#login-button').click();\n// Add assertions based on shouldSucceed\nif (shouldSucceed) {\n  cy.url().should('include', expectedUrl);\n} else {\n  cy.url().should('include', '/'); // Adjust based on your application\n  cy.get('[data-test=\"error\"]').should('be.visible').and('have.text', 'Epic sadface: Sorry, this user has been locked out.'); // Adjust selector based on your app\n}",
              "err": {},
              "uuid": "bbbd8770-d80c-44b7-8a09-e5c34a19a4f0",
              "parentUUID": "f059e651-94d5-48be-b0a2-7d55a43a1a09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecd85cfe-8420-4bf0-a099-6ceb0080b753",
            "618df6a1-6ac7-4e0d-94af-c2d61834fbfa",
            "c233e885-0c0c-42b0-95a1-6310b8905198",
            "bbbd8770-d80c-44b7-8a09-e5c34a19a4f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9337,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/mochawesome-report"
      },
      "version": "6.2.0"
    }
  }
}